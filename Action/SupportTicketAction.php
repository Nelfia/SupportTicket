<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace SupportTicket\Action;

use SupportTicket\Action\Base\SupportTicketAction as  BaseSupportTicketAction;
use SupportTicket\Event\SupportTicketEvent;
use SupportTicket\Model\SupportTicket;
use Thelia\Core\Template\ParserInterface;
use Thelia\Log\Tlog;
use Thelia\Mailer\MailerFactory;
use Thelia\Model\AdminQuery;
use Thelia\Model\ConfigQuery;
use Thelia\Model\CustomerQuery;
use Thelia\Model\MessageQuery;

/**
 * Class SupportTicketAction
 * @package SupportTicket\Action
 */
class SupportTicketAction extends BaseSupportTicketAction
{

    protected $parser;

    protected $mailer;

    public function __construct(ParserInterface $parser, MailerFactory $mailer)
    {
        $this->parser = $parser;
        $this->mailer = $mailer;
    }

    public function create(SupportTicketEvent $event)
    {
        parent::create($event);

        // send email
        $this->sendMail($event->getSupportTicket(), false);
    }

    public function update(SupportTicketEvent $event)
    {
        $model = $this->getSupportTicket($event);

        $sendEmail = false;

        if ($model->getStatus() === SupportTicket::STATUS_NEW) {
            $sendEmail = true;
        }

        parent::update($event);

        if (true === $sendEmail) {
            $this->sendMail($event->getSupportTicket(), true);
        }
    }

    protected function sendMail(SupportTicket $supportTicket, $toCustomer = true)
    {
        $contactEmail = ConfigQuery::read('store_email');

        if (true === $toCustomer) {
            $emailTemplate = 'supportticket_customer';
            $customer = CustomerQuery::create()->findPk($supportTicket->getCustomerId());
            $locale = $customer->getCustomerLang()->getLocale();
            $emailTo = $customer->getEmail();
        } else {
            $emailTemplate = 'supportticket_administrator';
            $administrator = AdminQuery::create()->findPk($supportTicket->getAdminId());
            $locale = $administrator->getLocale();
            $emailTo = $contactEmail;
        }

        if ($contactEmail) {

            $message = MessageQuery::create()
                ->filterByName($emailTemplate)
                ->findOne()
            ;

            if (null === $message) {
                throw new \Exception(sprintf("Failed to load message '%s'.", $emailTemplate));
            }

            $this->parser->assign('locale', $locale);
            $this->parser->assign('ticket', $supportTicket);
            /*
            $this->parser->assign('status', $event->getStatus());
            $this->parser->assign('customerId', $event->getCustomerId());
            $this->parser->assign('adminId', $event->getAdminId());
            $this->parser->assign('orderId', $event->getOrderId());
            $this->parser->assign('orderProductId', $event->getOrderProductId());
            $this->parser->assign('subject', $event->getSubject());
            $this->parser->assign('message', $event->getMessage());
            $this->parser->assign('response', $event->getResponse());
            $this->parser->assign('comment', $event->getComment());
            */

            $message
                ->setLocale($locale);

            $instance = \Swift_Message::newInstance()
                ->addTo($emailTo)
                ->addFrom($contactEmail, ConfigQuery::read('store_name'))
            ;

            // Build subject and body
            $message->buildMessage($this->parser, $instance);

            $this->mailer->send($instance);

            Tlog::getInstance()->debug("Sending support ticket mail to " . $emailTo);
        } else {
            Tlog::getInstance()->debug("Support ticket message no contact email ");
        }
    }
}
